pipeline {
  agent any   // Exécuter sur n’importe quel agent (ex: ton Jenkins Dockerisé)

  options {
    timestamps()   // Ajoute des timestamps aux logs
  }

  stages {
    stage('Checkout') {   // 1) Récupère ton code source
      steps {
        checkout scm
      }
    }

    stage('Build & Push Docker') {   // 2) Build puis push l'image Docker
      steps {
        withCredentials([usernamePassword(
          credentialsId: 'jensins-readonly',   // ID de ton credential Docker Hub
          usernameVariable: 'DOCKER_USER',
          passwordVariable: 'DOCKER_TOKEN'
        )]) {
          script {
            // Nom fixe de ton image (toujours écrasée à chaque build)
            def image = "${DOCKER_USER}/jenkins_cicd:latest"

            sh """
              set -e
              echo "[Build] ${image}"
              docker build -t "${image}" .

              echo "[Login] Docker Hub"
              echo "${DOCKER_TOKEN}" | docker login -u "${DOCKER_USER}" --password-stdin

              echo "[Push] ${image}"
              docker push "${image}"
            """
          }
        }
      }
    }

    stage('Deploy to Render (TEST)') {   // 3) Déclenche le déploiement Render
      steps {
        withCredentials([string(credentialsId: 'render-hook', variable: 'HOOK')]) {
          sh 'curl -i -X POST "$HOOK"'
        }
      }
    }
  }

  post {
    always {
      cleanWs()   // Nettoie le workspace après chaque build
    }
  }
}
